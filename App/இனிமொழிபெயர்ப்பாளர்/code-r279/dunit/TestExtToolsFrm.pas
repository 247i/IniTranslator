unit TestExtToolsFrm;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, TBX, TntButtons, TntActnList, ExtToolsFrm, SysUtils, Classes, ComCtrls, 
  Windows, TntDialogs, StdCtrls, BaseForm, Messages, ShortCutEdit, TntExtCtrls, ExtCtrls, 
  Menus, Controls, ActnList, SpTBXItem, Dialogs, AppOptions, TB2Item, Forms, Buttons, TntMenus, 
  TntStdCtrls, Graphics, ImgList;
type
  // Test methods for class TfrmTools
  
  TestTfrmTools = class(TTestCase)
  strict private
    FfrmTools: TfrmTools;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestArgumentsClick;
    procedure TestInitialDirClick;
    procedure TestlbContentsClick;
    procedure TestedTitleChange;
    procedure TestbtnOKClick;
    procedure TestacAddExecute;
    procedure TestacDeleteExecute;
    procedure TestacMoveUpExecute;
    procedure TestacMoveDownExecute;
    procedure TestacCommandExecute;
    procedure TestacClearExecute;
    procedure TestacUseShellexecuteExecute;
    procedure TestacPromptExecute;
    procedure TestacWaitExecute;
    procedure TestacTestExecute;
    procedure TestacArgsExecute;
    procedure TestacDirExecute;
    procedure TestalToolsUpdate;
    procedure TestlbContentsDataFind;
    procedure TestlbContentsData;
    procedure TestlbContentsDrawItem;
    procedure TestEdit;
    procedure TestLoadOptions;
    procedure TestSaveOptions;
    procedure TestClearToolList;
  end;

implementation

procedure TestTfrmTools.SetUp;
begin
  FfrmTools := TfrmTools.Create(nil);
end;

procedure TestTfrmTools.TearDown;
begin
  FfrmTools.Free;
  FfrmTools := nil;
end;

procedure TestTfrmTools.TestArgumentsClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.ArgumentsClick(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestInitialDirClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.InitialDirClick(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestlbContentsClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.lbContentsClick(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestedTitleChange;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.edTitleChange(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestbtnOKClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.btnOKClick(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacAddExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acAddExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacDeleteExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acDeleteExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacMoveUpExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acMoveUpExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacMoveDownExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acMoveDownExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacCommandExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acCommandExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacClearExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acClearExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacUseShellexecuteExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acUseShellexecuteExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacPromptExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acPromptExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacWaitExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acWaitExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacTestExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acTestExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacArgsExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acArgsExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestacDirExecute;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FfrmTools.acDirExecute(Sender);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestalToolsUpdate;
var
  Handled: Boolean;
  Action: TBasicAction;
begin
  // TODO: Setup method call parameters
  FfrmTools.alToolsUpdate(Action, Handled);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestlbContentsDataFind;
var
  ReturnValue: Integer;
  FindString: string;
  Control: TWinControl;
begin
  // TODO: Setup method call parameters
  ReturnValue := FfrmTools.lbContentsDataFind(Control, FindString);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestlbContentsData;
var
  Data: WideString;
  Index: Integer;
  Control: TWinControl;
begin
  // TODO: Setup method call parameters
  FfrmTools.lbContentsData(Control, Index, Data);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestlbContentsDrawItem;
var
  State: TOwnerDrawState;
  Rect: TRect;
  Index: Integer;
  Control: TWinControl;
begin
  // TODO: Setup method call parameters
  FfrmTools.lbContentsDrawItem(Control, Index, Rect, State);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestEdit;
var
  ReturnValue: Boolean;
  TestClickEvent: TTestToolItemClickEvent;
  MainActionList: TActionList;
  Options: TAppOptions;
begin
  // TODO: Setup method call parameters
  ReturnValue := FfrmTools.Edit(Options, MainActionList, TestClickEvent);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestLoadOptions;
var
  Options: TAppOptions;
begin
  // TODO: Setup method call parameters
  FfrmTools.LoadOptions(Options);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestSaveOptions;
var
  Options: TAppOptions;
begin
  // TODO: Setup method call parameters
  FfrmTools.SaveOptions(Options);
  // TODO: Validate method results
end;

procedure TestTfrmTools.TestClearToolList;
begin
  FfrmTools.ClearToolList;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTfrmTools.Suite);
end.

