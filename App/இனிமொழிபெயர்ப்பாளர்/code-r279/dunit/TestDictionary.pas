unit TestDictionary;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, Dictionary, SysUtils, TntClasses, TransIntf;
type
  // Test methods for class TDictionaryItems
  
  TestTDictionaryItems = class(TTestCase)
  strict private
    FDictionaryItems: TDictionaryItems;
  private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestInvert;
    procedure TestAssign;
    procedure TestLoadFromFile;
    procedure TestSaveToFile;
    procedure TestAdd;
    procedure TestAdd1;
    procedure TestDelete;
    procedure TestIndexOf;
    procedure TestFind;
    procedure TestClear;
    procedure TestSort;
    procedure TestTrimTranslations;
  end;

implementation

procedure TestTDictionaryItems.SetUp;
begin
  FDictionaryItems := TDictionaryItems.Create;
end;

procedure TestTDictionaryItems.TearDown;
begin
  FDictionaryItems.Free;
  FDictionaryItems := nil;
end;

procedure TestTDictionaryItems.TestInvert;
begin
  FDictionaryItems.Invert;
  // TODO: Validate method results
end;

procedure TestTDictionaryItems.TestAssign;
var
  Source: TPersistent;
begin
  // TODO: Setup method call parameters
  FDictionaryItems.Assign(Source);
  // TODO: Validate method results
end;

procedure TestTDictionaryItems.TestLoadFromFile;
var
  Filename: WideString;
begin
  // TODO: Setup method call parameters
  FDictionaryItems.LoadFromFile(Filename);
  // TODO: Validate method results
end;

procedure TestTDictionaryItems.TestSaveToFile;
var
  Filename: WideString;
begin
  // TODO: Setup method call parameters
  FDictionaryItems.SaveToFile(Filename);
  // TODO: Validate method results
end;

procedure TestTDictionaryItems.TestAdd;
var
  ReturnValue: TDictionaryItem;
  AOriginal: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDictionaryItems.Add(AOriginal);
  // TODO: Validate method results
end;

procedure TestTDictionaryItems.TestAdd1;
var
  ReturnValue: Integer;
  Item: TDictionaryItem;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDictionaryItems.Add(Item);
  // TODO: Validate method results
end;

procedure TestTDictionaryItems.TestDelete;
var
  Index: Integer;
begin
  // TODO: Setup method call parameters
  FDictionaryItems.Delete(Index);
  // TODO: Validate method results
end;

procedure TestTDictionaryItems.TestIndexOf;
var
  ReturnValue: Integer;
  S: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDictionaryItems.IndexOf(S);
  // TODO: Validate method results
end;

procedure TestTDictionaryItems.TestFind;
var
  ReturnValue: Boolean;
  Index: Integer;
  S: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDictionaryItems.Find(S, Index);
  // TODO: Validate method results
end;

procedure TestTDictionaryItems.TestClear;
begin
  FDictionaryItems.Clear;
  // TODO: Validate method results
end;

procedure TestTDictionaryItems.TestSort;
begin
  FDictionaryItems.Sort;
  // TODO: Validate method results
end;

procedure TestTDictionaryItems.TestTrimTranslations;
begin
  FDictionaryItems.TrimTranslations;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTDictionaryItems.Suite);
end.

