unit TestToolItems;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Controls, ToolItems, Classes, SysUtils, TransIntf, WideIniFiles;
type
  // Test methods for class TExternalToolItem
  
  TestTExternalToolItem = class(TTestCase)
  strict private
    FExternalToolItem: TExternalToolItem;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDisplayName;
    procedure TestAbout;
    procedure TestStatus;
    procedure TestIcon;
    procedure TestExecute;
    procedure TestInit;
  end;
  // Test methods for class TExternalToolItems

  TestTExternalToolItems = class(TTestCase)
  strict private
    FExternalToolItems: TExternalToolItems;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestInitAll;
    procedure TestGetStrings;
  end;

implementation

procedure TestTExternalToolItem.SetUp;
begin
  FExternalToolItem := TExternalToolItem.Create(nil,nil);
end;

procedure TestTExternalToolItem.TearDown;
begin
  FExternalToolItem.Free;
  FExternalToolItem := nil;
end;

procedure TestTExternalToolItem.TestDisplayName;
var
  ReturnValue: WideString;
begin
  ReturnValue := FExternalToolItem.DisplayName;
  // TODO: Validate method results
end;

procedure TestTExternalToolItem.TestAbout;
var
  ReturnValue: WideString;
begin
  ReturnValue := FExternalToolItem.About;
  // TODO: Validate method results
end;

procedure TestTExternalToolItem.TestStatus;
var
  ReturnValue: Integer;
  SelectedItem: ITranslationItem;
  Orphans: ITranslationItems;
  Items: ITranslationItems;
begin
  // TODO: Setup method call parameters
  ReturnValue := FExternalToolItem.Status(Items, Orphans, SelectedItem);
  // TODO: Validate method results
end;

procedure TestTExternalToolItem.TestIcon;
var
  ReturnValue: System.Cardinal;
begin
  ReturnValue := FExternalToolItem.Icon;
  // TODO: Validate method results
end;

procedure TestTExternalToolItem.TestExecute;
var
  ReturnValue: HRESULT;
  SelectedItem: ITranslationItem;
  Orphans: ITranslationItems;
  Items: ITranslationItems;
begin
  // TODO: Setup method call parameters
  ReturnValue := FExternalToolItem.Execute(Items, Orphans, SelectedItem);
  // TODO: Validate method results
end;

procedure TestTExternalToolItem.TestInit;
var
  ApplicationServices: IApplicationServices;
begin
  // TODO: Setup method call parameters
  FExternalToolItem.Init(ApplicationServices);
  // TODO: Validate method results
end;

procedure TestTExternalToolItems.SetUp;
begin
  FExternalToolItems := TExternalToolItems.Create('');
end;

procedure TestTExternalToolItems.TearDown;
begin
  FExternalToolItems.Free;
  FExternalToolItems := nil;
end;

procedure TestTExternalToolItems.TestInitAll;
begin
  FExternalToolItems.InitAll;
  // TODO: Validate method results
end;

procedure TestTExternalToolItems.TestGetStrings;
var
  ini: TWideCustomIniFile;
begin
  // TODO: Setup method call parameters
  FExternalToolItems.GetStrings(ini);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTExternalToolItem.Suite);
  RegisterTest(TestTExternalToolItems.Suite);
end.

