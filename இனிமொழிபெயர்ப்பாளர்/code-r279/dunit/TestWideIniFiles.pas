unit TestWideIniFiles;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, SysUtils, WideIniFiles, TntClasses, Windows;
type
  // Test methods for class TWideCustomIniFile
  
  // Test methods for class TWideStringHash
  
  TestTWideStringHash = class(TTestCase)
  strict private
    FWideStringHash: TWideStringHash;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestClear;
    procedure TestRemove;
    procedure TestModify;
    procedure TestValueOf;
  end;
  // Test methods for class TWideHashedStringList
  
  TestTWideHashedStringList = class(TTestCase)
  strict private
    FWideHashedStringList: TWideHashedStringList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIndexOf;
    procedure TestIndexOfName;
  end;
  // Test methods for class TWideMemIniFile
  
  TestTWideMemIniFile = class(TTestCase)
  strict private
    FWideMemIniFile: TWideMemIniFile;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestClear;
    procedure TestDeleteKey;
    procedure TestEraseSection;
    procedure TestGetStrings;
    procedure TestReadSection;
    procedure TestReadSections;
    procedure TestReadSectionValues;
    procedure TestReadString;
    procedure TestRename;
    procedure TestSetStrings;
    procedure TestUpdateFile;
    procedure TestWriteString;
  end;
  // Test methods for class TWideIniFile
  
  TestTWideIniFile = class(TTestCase)
  strict private
    FWideIniFile: TWideIniFile;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestReadString;
    procedure TestWriteString;
    procedure TestReadSection;
    procedure TestReadSections;
    procedure TestReadSectionValues;
    procedure TestEraseSection;
    procedure TestDeleteKey;
    procedure TestUpdateFile;
  end;

implementation

procedure TestTWideStringHash.SetUp;
begin
  FWideStringHash := TWideStringHash.Create;
end;

procedure TestTWideStringHash.TearDown;
begin
  FWideStringHash.Free;
  FWideStringHash := nil;
end;

procedure TestTWideStringHash.TestAdd;
var
  Value: Integer;
  Key: WideString;
begin
  // TODO: Setup method call parameters
  FWideStringHash.Add(Key, Value);
  // TODO: Validate method results
end;

procedure TestTWideStringHash.TestClear;
begin
  FWideStringHash.Clear;
  // TODO: Validate method results
end;

procedure TestTWideStringHash.TestRemove;
var
  Key: WideString;
begin
  // TODO: Setup method call parameters
  FWideStringHash.Remove(Key);
  // TODO: Validate method results
end;

procedure TestTWideStringHash.TestModify;
var
  ReturnValue: Boolean;
  Value: Integer;
  Key: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWideStringHash.Modify(Key, Value);
  // TODO: Validate method results
end;

procedure TestTWideStringHash.TestValueOf;
var
  ReturnValue: Integer;
  Key: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWideStringHash.ValueOf(Key);
  // TODO: Validate method results
end;

procedure TestTWideHashedStringList.SetUp;
begin
  FWideHashedStringList := TWideHashedStringList.Create;
end;

procedure TestTWideHashedStringList.TearDown;
begin
  FWideHashedStringList.Free;
  FWideHashedStringList := nil;
end;

procedure TestTWideHashedStringList.TestIndexOf;
var
  ReturnValue: Integer;
  S: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWideHashedStringList.IndexOf(S);
  // TODO: Validate method results
end;

procedure TestTWideHashedStringList.TestIndexOfName;
var
  ReturnValue: Integer;
  Name: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWideHashedStringList.IndexOfName(Name);
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.SetUp;
begin
  FWideMemIniFile := TWideMemIniFile.Create('');
end;

procedure TestTWideMemIniFile.TearDown;
begin
  FWideMemIniFile.Free;
  FWideMemIniFile := nil;
end;

procedure TestTWideMemIniFile.TestClear;
begin
  FWideMemIniFile.Clear;
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.TestDeleteKey;
var
  Ident: WideString;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  FWideMemIniFile.DeleteKey(Section, Ident);
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.TestEraseSection;
var
  Section: WideString;
begin
  // TODO: Setup method call parameters
  FWideMemIniFile.EraseSection(Section);
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.TestGetStrings;
var
  List: TTntStrings;
begin
  // TODO: Setup method call parameters
  FWideMemIniFile.GetStrings(List);
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.TestReadSection;
var
  Strings: TTntStrings;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  FWideMemIniFile.ReadSection(Section, Strings);
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.TestReadSections;
var
  Strings: TTntStrings;
begin
  // TODO: Setup method call parameters
  FWideMemIniFile.ReadSections(Strings);
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.TestReadSectionValues;
var
  Strings: TTntStrings;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  FWideMemIniFile.ReadSectionValues(Section, Strings);
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.TestReadString;
var
  ReturnValue: WideString;
  Default: WideString;
  Ident: WideString;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWideMemIniFile.ReadString(Section, Ident, Default);
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.TestRename;
var
  Reload: Boolean;
  FileName: WideString;
begin
  // TODO: Setup method call parameters
  FWideMemIniFile.Rename(FileName, Reload);
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.TestSetStrings;
var
  List: TTntStrings;
begin
  // TODO: Setup method call parameters
  FWideMemIniFile.SetStrings(List);
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.TestUpdateFile;
begin
  FWideMemIniFile.UpdateFile;
  // TODO: Validate method results
end;

procedure TestTWideMemIniFile.TestWriteString;
var
  Value: WideString;
  Ident: WideString;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  FWideMemIniFile.WriteString(Section, Ident, Value);
  // TODO: Validate method results
end;

procedure TestTWideIniFile.SetUp;
begin
  FWideIniFile := TWideIniFile.Create('');
end;

procedure TestTWideIniFile.TearDown;
begin
  FWideIniFile.Free;
  FWideIniFile := nil;
end;

procedure TestTWideIniFile.TestReadString;
var
  ReturnValue: WideString;
  Default: WideString;
  Ident: WideString;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWideIniFile.ReadString(Section, Ident, Default);
  // TODO: Validate method results
end;

procedure TestTWideIniFile.TestWriteString;
var
  Value: WideString;
  Ident: WideString;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  FWideIniFile.WriteString(Section, Ident, Value);
  // TODO: Validate method results
end;

procedure TestTWideIniFile.TestReadSection;
var
  Strings: TTntStrings;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  FWideIniFile.ReadSection(Section, Strings);
  // TODO: Validate method results
end;

procedure TestTWideIniFile.TestReadSections;
var
  Strings: TTntStrings;
begin
  // TODO: Setup method call parameters
  FWideIniFile.ReadSections(Strings);
  // TODO: Validate method results
end;

procedure TestTWideIniFile.TestReadSectionValues;
var
  Strings: TTntStrings;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  FWideIniFile.ReadSectionValues(Section, Strings);
  // TODO: Validate method results
end;

procedure TestTWideIniFile.TestEraseSection;
var
  Section: WideString;
begin
  // TODO: Setup method call parameters
  FWideIniFile.EraseSection(Section);
  // TODO: Validate method results
end;

procedure TestTWideIniFile.TestDeleteKey;
var
  Ident: WideString;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  FWideIniFile.DeleteKey(Section, Ident);
  // TODO: Validate method results
end;

procedure TestTWideIniFile.TestUpdateFile;
begin
  FWideIniFile.UpdateFile;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTWideStringHash.Suite);
  RegisterTest(TestTWideHashedStringList.Suite);
  RegisterTest(TestTWideMemIniFile.Suite);
  RegisterTest(TestTWideIniFile.Suite);
end.

