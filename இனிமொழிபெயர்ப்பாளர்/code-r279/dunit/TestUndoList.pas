unit TestUndoList;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, SysUtils, UndoList;
type
  // Test methods for class TUndoItem
  
  TestTUndoItem = class(TTestCase)
  strict private
    FUndoItem: TUndoItem;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestDelete;
    procedure TestClear;
  end;
  // Test methods for class TUndoList
  
  TestTUndoList = class(TTestCase)
  strict private
    FUndoList: TUndoList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestClear;
    procedure TestCanUndo;
    procedure TestUndo;
    procedure TestBeginUpdate;
    procedure TestEndUpdate;
    procedure TestUpdating;
    procedure TestBeginGroup;
    procedure TestEndGroup;
  end;

implementation

procedure TestTUndoItem.SetUp;
begin
  FUndoItem := TUndoItem.Create(nil,'',0);
end;

procedure TestTUndoItem.TearDown;
begin
  FUndoItem.Free;
  FUndoItem := nil;
end;

procedure TestTUndoItem.TestAdd;
var
  AItem: TUndoItem;
begin
  // TODO: Setup method call parameters
  FUndoItem.Add(AItem);
  // TODO: Validate method results
end;

procedure TestTUndoItem.TestDelete;
var
  Index: Integer;
begin
  // TODO: Setup method call parameters
  FUndoItem.Delete(Index);
  // TODO: Validate method results
end;

procedure TestTUndoItem.TestClear;
begin
  FUndoItem.Clear;
  // TODO: Validate method results
end;

procedure TestTUndoList.SetUp;
begin
  FUndoList := TUndoList.Create;
end;

procedure TestTUndoList.TearDown;
begin
  FUndoList.Free;
  FUndoList := nil;
end;

procedure TestTUndoList.TestAdd;
var
  UndoType: Integer;
  Description: WideString;
  Data: TUndoData;
begin
  // TODO: Setup method call parameters
  FUndoList.Add(Data, Description, UndoType);
  // TODO: Validate method results
end;

procedure TestTUndoList.TestClear;
begin
  FUndoList.Clear;
  // TODO: Validate method results
end;

procedure TestTUndoList.TestCanUndo;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FUndoList.CanUndo;
  // TODO: Validate method results
end;

procedure TestTUndoList.TestUndo;
begin
  FUndoList.Undo;
  // TODO: Validate method results
end;

procedure TestTUndoList.TestBeginUpdate;
begin
  FUndoList.BeginUpdate;
  // TODO: Validate method results
end;

procedure TestTUndoList.TestEndUpdate;
begin
  FUndoList.EndUpdate;
  // TODO: Validate method results
end;

procedure TestTUndoList.TestUpdating;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FUndoList.Updating;
  // TODO: Validate method results
end;

procedure TestTUndoList.TestBeginGroup;
var
  Description: WideString;
begin
  // TODO: Setup method call parameters
  FUndoList.BeginGroup(Description);
  // TODO: Validate method results
end;

procedure TestTUndoList.TestEndGroup;
begin
  FUndoList.EndGroup;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTUndoItem.Suite);
  RegisterTest(TestTUndoList.Suite);
end.

