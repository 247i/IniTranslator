unit TestTranslateFile;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, TntSysUtils, TntClasses, AppConsts, Classes, SysUtils, TransIntf, 
  TranslateFile, AppUtils;
type
  // Test methods for class TTranslationItem
  
  TestTTranslationItem = class(TTestCase)
  strict private
    FTranslationItem: TTranslationItem;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestTransQuote;
    procedure TestOrigQuote;
  end;
  // Test methods for class TTranslationItems
  
  TestTTranslationItems = class(TTestCase)
  strict private
    FTranslationItems: TTranslationItems;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestAdd1;
    procedure TestCreateItem;
    procedure TestDelete;
    procedure TestClear;
    procedure TestFind;
    procedure TestIndexOf;
    procedure TestIndexOf1;
  end;
  // Test methods for class TTranslateFiles
  
  TestTTranslateFiles = class(TTestCase)
  strict private
    FTranslateFiles: TTranslateFiles;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLoadOriginal;
    procedure TestLoadTranslation;
    procedure TestSaveOriginal;
    procedure TestSaveTranslation;
  end;

implementation

procedure TestTTranslationItem.SetUp;
begin
  FTranslationItem := TTranslationItem.Create;
end;

procedure TestTTranslationItem.TearDown;
begin
  FTranslationItem.Free;
  FTranslationItem := nil;
end;

procedure TestTTranslationItem.TestTransQuote;
var
  ReturnValue: WideChar;
begin
  ReturnValue := FTranslationItem.TransQuote;
  // TODO: Validate method results
end;

procedure TestTTranslationItem.TestOrigQuote;
var
  ReturnValue: WideChar;
begin
  ReturnValue := FTranslationItem.OrigQuote;
  // TODO: Validate method results
end;

procedure TestTTranslationItems.SetUp;
begin
  FTranslationItems := TTranslationItems.Create;
end;

procedure TestTTranslationItems.TearDown;
begin
  FTranslationItems.Free;
  FTranslationItems := nil;
end;

procedure TestTTranslationItems.TestAdd;
var
  ReturnValue: ITranslationItem;
begin
  ReturnValue := FTranslationItems.Add;
  // TODO: Validate method results
end;

procedure TestTTranslationItems.TestAdd1;
var
  ReturnValue: Integer;
  Item: ITranslationItem;
begin
  // TODO: Setup method call parameters
  ReturnValue := FTranslationItems.Add(Item);
  // TODO: Validate method results
end;

procedure TestTTranslationItems.TestCreateItem;
var
  ReturnValue: ITranslationItem;
begin
  ReturnValue := FTranslationItems.CreateItem;
  // TODO: Validate method results
end;

procedure TestTTranslationItems.TestDelete;
var
  Index: Integer;
begin
  // TODO: Setup method call parameters
  FTranslationItems.Delete(Index);
  // TODO: Validate method results
end;

procedure TestTTranslationItems.TestClear;
begin
  FTranslationItems.Clear;
  // TODO: Validate method results
end;

procedure TestTTranslationItems.TestFind;
var
  ReturnValue: Boolean;
  Index: Integer;
  CaseSense: Boolean;
  Name: WideString;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FTranslationItems.Find(Section, Name, CaseSense, Index);
  // TODO: Validate method results
end;

procedure TestTTranslationItems.TestIndexOf;
var
  ReturnValue: Integer;
  CaseSense: Boolean;
  Name: WideString;
  Section: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FTranslationItems.IndexOf(Section, Name, CaseSense);
  // TODO: Validate method results
end;

procedure TestTTranslationItems.TestIndexOf1;
var
  ReturnValue: Integer;
  AItem: ITranslationItem;
begin
  // TODO: Setup method call parameters
  ReturnValue := FTranslationItems.IndexOf(AItem);
  // TODO: Validate method results
end;

procedure TestTTranslateFiles.SetUp;
begin
  FTranslateFiles := TTranslateFiles.Create;
end;

procedure TestTTranslateFiles.TearDown;
begin
  FTranslateFiles.Free;
  FTranslateFiles := nil;
end;

procedure TestTTranslateFiles.TestLoadOriginal;
var
  ReturnValue: TEncoding;
  Encoding: TEncoding;
  Filename: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FTranslateFiles.LoadOriginal(Filename, Encoding);
  // TODO: Validate method results
end;

procedure TestTTranslateFiles.TestLoadTranslation;
var
  ReturnValue: TEncoding;
  Encoding: TEncoding;
  Filename: WideString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FTranslateFiles.LoadTranslation(Filename, Encoding);
  // TODO: Validate method results
end;

procedure TestTTranslateFiles.TestSaveOriginal;
var
  Encoding: TEncoding;
  Filename: WideString;
begin
  // TODO: Setup method call parameters
  FTranslateFiles.SaveOriginal(Filename, Encoding);
  // TODO: Validate method results
end;

procedure TestTTranslateFiles.TestSaveTranslation;
var
  Encoding: TEncoding;
  Filename: WideString;
begin
  // TODO: Setup method call parameters
  FTranslateFiles.SaveTranslation(Filename, Encoding);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTTranslationItem.Suite);
  RegisterTest(TestTTranslationItems.Suite);
  RegisterTest(TestTTranslateFiles.Suite);
end.

